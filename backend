#include <LSM6DS3.h>
#include <Wire.h>
#define RF_SW_PW_PIN PB5
#define RF_SW_PIN PB4
static void getPosition();
static void ble_initialize_gatt_db();
static void ble_start_advertising();
const uint8_t advertised_name[] = "XIAOMG25_BLE";
uint8_t connection_handle = 0u;
uint16_t imu_characteristic_handle = 0u;
bool indication_enabled = false;
//Create a instance of class LSM6DS3
LSM6DS3 myIMU(I2C_MODE, 0x6A);    //I2C device address 0x6A
float aX, aY, aZ, gX, gY, gZ;
String result;
const float accelerationThreshold = 2.5; // threshold of significant in G's
const int numSamples = 119;
const int buzzerPin = D1;  // XIAO MG24 Sense digital pin D1

int samplesRead = numSamples;
void setup()
{
  Serial.begin(115200);
  while (!Serial);
  pinMode(PD5,OUTPUT);
  digitalWrite(PD5,HIGH);
  //Call .begin() to configure the IMUs
  if (myIMU.begin() != 0) {
    Serial.println("Device error");
  } else {
    Serial.println("aX,aY,aZ,gX,gY,gZ");
  }
  pinMode(LED_BUILTIN, OUTPUT);
  digitalWrite(LED_BUILTIN, LED_BUILTIN_INACTIVE);
  // turn on this antenna function
  pinMode(RF_SW_PW_PIN, OUTPUT);
  digitalWrite(RF_SW_PW_PIN, HIGH);
  delay(100);
  // HIGH -> Use external antenna / LOW -> Use built-in antenna
  pinMode(RF_SW_PIN, OUTPUT);
  digitalWrite(RF_SW_PIN, LOW);
  pinMode(buzzerPin, OUTPUT);

}
void loop()
{
  getPosition();
}
/**************************************************************************//**
 * Sends a BLE indication with the current temperature to the connected device
 * if enabled, then waits for a second
 *****************************************************************************/


static void getPosition() {
  if (!indication_enabled) {
    return;
  }
  // --- Read and scale sensors ---
  uint8_t buffer[6];
  aX = int(myIMU.readFloatAccelX() * 100);
  aY = int(myIMU.readFloatAccelY() * 100);
  aZ = int(myIMU.readFloatAccelZ() * 100);
  gX = int(myIMU.readFloatGyroX());
  gY = int(myIMU.readFloatGyroY());
  gZ = int(myIMU.readFloatGyroZ());
  // --- Truncate to 8-bit range (âˆ’128..127) ---
  uint8_t ax8 = (int8_t)constrain(aX, -128, 127) + 128;
  uint8_t ay8 = (int8_t)constrain(aY, -128, 127) + 128;
  uint8_t az8 = (int8_t)constrain(aZ, -128, 127) + 128;
  uint8_t gx8 = (int8_t)constrain(gX, -128, 127) + 128;
  uint8_t gy8 = (int8_t)constrain(gY, -128, 127) + 128;
  uint8_t gz8 = (int8_t)constrain(gZ, -128, 127) + 128;
  buffer[0] = ax8;
  buffer[1] = ay8;
  buffer[2] = az8;
  buffer[3] = gx8;
  buffer[4] = gy8;
  buffer[5] = gz8;
  sl_bt_gatt_server_send_indication(connection_handle,
                                    imu_characteristic_handle,
                                    sizeof(buffer), buffer);

  // --- Debug output ---
  Serial.print("IMU TX: ");
  Serial.print((int)ax8); Serial.print(",");
  Serial.print((int)ay8); Serial.print(",");
  Serial.print((int)az8); Serial.print(",");
  Serial.print((int)gx8); Serial.print(",");
  Serial.print((int)gy8); Serial.print(",");
  Serial.println((int)gz8);

  if (az8 > 188) {
    tone(buzzerPin, 1000);       // start tone at 1000 Hz
  } else if (az8 < 165) {
    noTone(buzzerPin);           // stop tone if below threshold
  }
}
/**************************************************************************//**
 * Bluetooth stack event handler
 * Called when an event happens on BLE the stack
 *
 * @param[in] evt Event coming from the Bluetooth stack
 *****************************************************************************/
void sl_bt_on_event(sl_bt_msg_t *evt)
{

  switch (SL_BT_MSG_ID(evt->header)) {
    // This event is received when the BLE device has successfully booted
    case sl_bt_evt_system_boot_id:
    {
      // Print a welcome message
      Serial.begin(115200);
      Serial.println();
      Serial.println("Silicon Labs BLE");
      Serial.println("BLE stack booted");
      // Initialize the application specific GATT DB
      ble_initialize_gatt_db();
      // Start advertising
      ble_start_advertising();
    }
    break;
    // This event is received when a BLE connection has been opened
    case sl_bt_evt_connection_opened_id:
      // Store the connection handle which will be needed for sending indications
      connection_handle = evt->data.evt_connection_opened.connection;
      Serial.println("Connection opened");
      digitalWrite(LED_BUILTIN, LED_BUILTIN_ACTIVE);
      break;
    // This event is received when a BLE connection has been closed
    case sl_bt_evt_connection_closed_id:
      // Reset stored values
      connection_handle = 0u;
      indication_enabled = false;
      Serial.println("Connection closed");
      digitalWrite(LED_BUILTIN, LED_BUILTIN_INACTIVE);
      // Restart the advertisement
      ble_start_advertising();
      break;
    // This event is received when a GATT characteristic status changes
    case sl_bt_evt_gatt_server_characteristic_status_id:
    {
      // If the temperature measurement characteristic has been changed
      if (evt->data.evt_gatt_server_characteristic_status.characteristic == imu_characteristic_handle) {
        uint16_t client_config_flags = evt->data.evt_gatt_server_characteristic_status.client_config_flags;
        uint8_t status_flags = evt->data.evt_gatt_server_characteristic_status.status_flags;
        if ((client_config_flags == 0x02) && (status_flags == 0x01)) {
          // If indication was enabled (0x02) in the client config flags, and the status flag shows that it's a change
          Serial.println("Position indication enabled");
          indication_enabled = true;
        } else if ((client_config_flags == 0x00) && (status_flags == 0x01)) {
          // If indication was disabled (0x00) in the client config flags, and the status flag shows that it's a change
          Serial.println("Position indication disabled");
          indication_enabled = false;
        }
      }
    }
    break;
    // Default event handler
    default:
      Serial.print("BLE event: 0x");
      Serial.println(SL_BT_MSG_ID(evt->header), HEX);
      break;
  }
}
/**************************************************************************//**
 * Starts BLE advertisement
 * Initializes advertising if it's called for the first time
 *****************************************************************************/
static void ble_start_advertising()
{
  static uint8_t advertising_set_handle = 0xff;
  static bool init = true;
  sl_status_t sc;
  if (init) {
    // Create an advertising set
    sc = sl_bt_advertiser_create_set(&advertising_set_handle);
    app_assert_status(sc);
    // Set advertising interval to 100ms
    sc = sl_bt_advertiser_set_timing(
      advertising_set_handle,
      1000,   // minimum advertisement interval (milliseconds * 1.6)
      1000,   // maximum advertisement interval (milliseconds * 1.6)
      0,     // advertisement duration
      0);    // maximum number of advertisement events
    app_assert_status(sc);
    init = false;
  }
  // Generate data for advertising
  sc = sl_bt_legacy_advertiser_generate_data(advertising_set_handle, sl_bt_advertiser_general_discoverable);
  app_assert_status(sc);
  // Start advertising and enable connections
  sc = sl_bt_legacy_advertiser_start(advertising_set_handle, sl_bt_advertiser_connectable_scannable);
  app_assert_status(sc);
  Serial.print("Started advertising as '");
  Serial.print((const char*)advertised_name);
  Serial.println("'...");
}
/**************************************************************************//**
 * Initializes the GATT database
 * Creates a new GATT session and adds certain services and characteristics
 *****************************************************************************/
static void ble_initialize_gatt_db()
{
  sl_status_t sc;
  uint16_t gattdb_session_id;
  uint16_t service_handle;
  uint16_t device_name_characteristic_handle;
  // Create a new GATT database session
  sc = sl_bt_gattdb_new_session(&gattdb_session_id);
  app_assert_status(sc);
  /**************** Generic Access Service (0x1800) ****************/
  const uint8_t generic_access_service_uuid[] = { 0x00, 0x18 };
  sc = sl_bt_gattdb_add_service(gattdb_session_id,
                                sl_bt_gattdb_primary_service,
                                SL_BT_GATTDB_ADVERTISED_SERVICE,
                                sizeof(generic_access_service_uuid),
                                generic_access_service_uuid,
                                &service_handle);
  app_assert_status(sc);
  // Device Name characteristic (0x2A00)
  const sl_bt_uuid_16_t device_name_characteristic_uuid = { .data = { 0x00, 0x2A } };
  sc = sl_bt_gattdb_add_uuid16_characteristic(gattdb_session_id,
                                              service_handle,
                                              SL_BT_GATTDB_CHARACTERISTIC_READ,
                                              0x00,
                                              0x00,
                                              device_name_characteristic_uuid,
                                              sl_bt_gattdb_fixed_length_value,
                                              sizeof(advertised_name) - 1,
                                              sizeof(advertised_name) - 1,
                                              advertised_name,
                                              &device_name_characteristic_handle);
  app_assert_status(sc);
  sc = sl_bt_gattdb_start_service(gattdb_session_id, service_handle);
  app_assert_status(sc);
  /**************** Generic IMU Service (custom 0x1815) ****************/
  const uint8_t generic_imu_service_uuid[] = { 0x15, 0x18 };
  sc = sl_bt_gattdb_add_service(gattdb_session_id,
                                sl_bt_gattdb_primary_service,
                                SL_BT_GATTDB_ADVERTISED_SERVICE,
                                sizeof(generic_imu_service_uuid),
                                generic_imu_service_uuid,
                                &service_handle);
  app_assert_status(sc);
  // Generic IMU Measurement characteristic (custom 0x2A58)
  const sl_bt_uuid_16_t imu_measurement_uuid = { .data = { 0x58, 0x2A } };
  uint8_t imu_initial_value[6] = { 0, 0, 0, 0, 0, 0 }; // 48-bit field
  sc = sl_bt_gattdb_add_uuid16_characteristic(gattdb_session_id,
                                              service_handle,
                                              SL_BT_GATTDB_CHARACTERISTIC_INDICATE,
                                              0x00,
                                              0x00,
                                              imu_measurement_uuid,
                                              sl_bt_gattdb_fixed_length_value,
                                              sizeof(imu_initial_value),
                                              sizeof(imu_initial_value),
                                              imu_initial_value,
                                              &imu_characteristic_handle);
  app_assert_status(sc);
  // Start and commit
  sc = sl_bt_gattdb_start_service(gattdb_session_id, service_handle);
  app_assert_status(sc);
  sc = sl_bt_gattdb_commit(gattdb_session_id);
  app_assert_status(sc);
}









